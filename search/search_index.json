{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Principal","text":""},{"location":"#welcome-to-mkdocs-for-joaquin","title":"Welcome to MkDocs for Joaquin","text":"<ul> <li>En este repositorio vamos a encontrar las publicaciones o proyectos del alumno Joaqu\u00edn, as\u00ed mismo, tambi\u00e9n se documentar\u00e1n algunas pr\u00e1cticas.</li> </ul>"},{"location":"#referencia-para-los-archivos","title":"Referencia para los archivos.","text":"<ul> <li>El archivo donde indicamos como se crean las p\u00e1ginas aparece en Acerca de por lo tanto, podemos observar al menos el listado de comandos donde podemos ver como se crean los <code>sitios webs</code></li> </ul>"},{"location":"#enlace-al-repositorio-en-github","title":"Enlace al repositorio en github.","text":"<ul> <li> <p>Si queremos ver el enlace del repositio en GitHub accedemos Aqu\u00ed</p> <p></p> <p></p> </li> </ul>"},{"location":"create_site/","title":"Documento Create Site","text":"<ul> <li>Este ser\u00e1 el contenido del archivo de Create_site donde indicaremos como crear el principio de la p\u00e1gina.</li> </ul>"},{"location":"create_site/#mkdocs","title":"MkDocs","text":"<p>Este repositorio es para realizar la p\u00e1gina 6.2 de IAW donde trabajaremos con MkDocs.</p>"},{"location":"create_site/#primeros-pasos-que-tendremos-que-hacer","title":"Primeros pasos que tendremos que hacer.","text":"<ol> <li> <p>Como primer paso tendremos que hacer uso del siguiente comando : <code>docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material new .</code> Este comando realmente nos permitir\u00e1 generar la estructura de un proyecto MK2 desde cero.</p> </li> <li> <p>Tendremos que crear un sitio llamado <code>about.md</code> dentro de la carpeta docs.</p> <p></p> </li> <li> <p>Tenemos que crear un archivo llamado mokdocs.yml para indicar la configuraci\u00f3n que queremos a\u00f1adir.</p> </li> <li> <p>Ejemplo del archivo: </p> <p></p> </li> <li> <p>Si queremos generar un sitio web <code>servidor</code> desde nuestra consola, hacemos uso del siguiente comando <code>docker run --rm -it -p 8000:8000 -v \"$PWD\":/docs squidfunk/mkdocs-material</code></p> </li> </ol>"},{"location":"first/","title":"5.4-Dockerizar","text":"<p>Este documento git es para la pr\u00e1ctica que tenemos que Dockerizar y crear archivos de dockerfile para el juego 2048.</p>"},{"location":"first/#docker-file-para-ubuntu","title":"Docker file para UBUNTU","text":"<pre><code>```\n\nFROM ubuntu:23.04\n\n#Hay que instalar APACHE2 para ubuntu\n\n#Hay que poner un cmd para ubuntu\n\nLABEL author=\"Joaquin Gonzalez IAW\"\n\n#En el run podemos poner la continuidad de los comadnos con ; o &amp;&amp;\n#rm -rf /var/lib/apt/lists/* --&gt; Borrar\u00e1 todos los archivos cuando hacemos el update\n\nRUN apt update \\\n    &amp;&amp; apt install git -y \\\n    &amp;&amp; apt install apache2 -y \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n#Podemos tener dos capas diferentes para poder reutilizar cada \"CAPA\" de una manera diferente.\nRUN git clone https://github.com/josejuansanchez/2048.git /app \\\n    &amp;&amp; mv /app/* /var/www/html \\\n    &amp;&amp; rm -rf /app\n\n#Para ejecutar la docker run -d -p 80:80 2048\n\nCMD [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\" ]\n```\n</code></pre>"},{"location":"first/#docker-file-nginx","title":"Docker File NGINX","text":"<pre><code>```\n\nFROM nginx:23.04\n\n#Hay que instalar NGINX para ubuntu\n\n#Hay que poner un cmd para ubuntu\n\nLABEL author=\"Joaquin Gonzalez IAW\"\n\n#En el run podemos poner la continuidad de los comadnos con ; o &amp;&amp;\n#rm -rf /var/lib/apt/lists/* --&gt; Borrar\u00e1 todos los archivos cuando hacemos el update\n\nRUN apt update \\\n    &amp;&amp; apt install git -y \\\n    &amp;&amp; apt install nginx -y \\ \n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n#Podemos tener dos capas diferentes para poder reutilizar cada \"CAPA\" de una manera diferente.\nRUN git clone https://github.com/josejuansanchez/2048.git /app \\\n    &amp;&amp; mv /app/* /usr/share/nginx/html \\\n    &amp;&amp; rm -rf /app\n\n#Para ejecutar la docker run -d -p 80:80 2048\n```\n</code></pre>"},{"location":"hardweare/","title":"Hard We Are","text":"<p>Con\u00f3cenos!!: Empresa fundadada por un grupo de socios que se encarga de diferentes aptitudes relacionadas con el mundo de la inform\u00e1tica.</p>"},{"location":"hardweare/#socios-fundadores","title":"SOCIOS FUNDADORES","text":"<ol> <li>Encargado de aplicaciones Web y Dise\u00f1o : <code>Joaquin Gonz\u00e1lez</code></li> <li>Encargado de Ventas: <code>Guillermo S\u00e1nchez</code></li> <li>Encargado de Montaje: <code>Andr\u00e9s Frutos</code></li> <li> <p>Encargado de Asesoramiento: <code>Miguel Angel</code></p> </li> <li> <p>Antes de ser est\u00e1 empresa relacionada con el mundo del Hardware y tecnolog\u00edas quer\u00edamos crear una empresa relacionada con un negocio de CBD o un circuito de coches. Cuando tuvimos la junta de socios, nos decantamos por este proyecto, ya que todos ten\u00edamos alg\u00fan conocimiento sobre \u00e9l.</p> <p></p> </li> </ol>"},{"location":"hardweare/#idea-y-propuesta-de-valor","title":"Idea y propuesta de valor","text":"<ol> <li> <p>Nuestra idea de negocio se centra en una empresa que ofrece componentes de ordenadores de calidad, junto con servicios de montaje y atenci\u00f3n al cliente de primer nivel.</p> </li> <li> <p>Nos diferenciamos por ofrecer asesoramiento experto en la selecci\u00f3n de componentes de ordenadores para todo tipo de usuarios.</p> </li> <li> <p>Mejoramos el servicio al cliente con ventas personalizadas, montaje de componentes y seguimiento de pedidos. Nos destacamos por nuestra meticulosidad y especializaci\u00f3n en el campo.</p> <p></p> </li> </ol>"},{"location":"hardweare/#mision-vision-y-valores","title":"Misi\u00f3n , Visi\u00f3n y Valores.","text":"<ol> <li> <p><code>Misi\u00f3n: Nuestra misi\u00f3n es proporcionar el mejor servicio de reparaci\u00f3n, montaje, y atenci\u00f3n al cliente.</code></p> </li> <li> <p><code>Visi\u00f3n: Nuestra visi\u00f3n es convertirnos en la tienda de referencia tanto para los apasionados de la inform\u00e1tica, como para los que acaban de empezar.</code></p> </li> <li> <p><code>Valores: Calidad, Atenci\u00f3n al cliente , innovaci\u00f3n, transparencia</code></p> <p></p> </li> </ol>"},{"location":"hardweare/#nuestros-productos","title":"Nuestros productos","text":"<ul> <li> <p>Estos son los productos que ofrecemos como empresa:</p> </li> <li> <p>Componentes</p> </li> <li> <p>Ordenadores Pre-Montados</p> </li> <li> <p>Mantenimiento</p> </li> <li> <p>Asesoramiento</p> </li> </ul>"},{"location":"hardweare/#donde-encontrarnos","title":"\u00bf Donde encontrarnos ?","text":"<ul> <li><code>Direcci\u00f3n: C/Blas Infante N\u00ba 64</code></li> </ul>"},{"location":"second/","title":"Terraform_AWS","text":"<p>Este repositorio es para realizar y explicar la estructura de Terraform para el despliegue de las instancias de AWS</p> <ul> <li>En est\u00e1 practica tendremos que realizar un script pero con una estructura de Terraform para implementar la estructura de las m\u00e1quinas que utilizamos en la Pr\u00e1ctica 1.11 de IAW del trimestre pasado.</li> </ul>"},{"location":"second/#que-es-terraform","title":"\u00bf Qu\u00e9 es Terraform ?","text":"<ul> <li>Terraform es un software de insfraestructura c\u00f3mo codigo desarrollado por HashiCorp.      Es una herramienta que nos permite la configuraci\u00f3n de software dise\u00f1ada para potenciar la automatizaci\u00f3n de m\u00faltiples procesos a trav\u00e9s de conceptos como el de insfraesture as code.</li> </ul>"},{"location":"second/#estructura-de-este-script","title":"Estructura de este script.","text":"<ul> <li>Este script deber\u00e1 tener tres funciones b\u00e1sicas:</li> <li>Crear el <code>grupo de seguridad</code></li> <li>Crear la <code>instancia</code></li> <li> <p>Crear y asociar la <code>IP flotante</code></p> </li> <li> <p>Como estructura de Terraform nuestro directorio tendr\u00e1 que tener la siguiente estructura.</p> <p>``` . \u251c\u2500\u2500 README.md \u2514\u2500\u2500 Terraform     \u251c\u2500\u2500 main.tf     \u251c\u2500\u2500 terraform.tfstate     \u2514\u2500\u2500 terraform.tfstate.backup</p> <p>```</p> </li> <li> <p>A\u00f1adiendo archivos tambi\u00e9n como el <code>.gitignore</code> que explicaremos al final.</p> </li> </ul>"},{"location":"second/#creacion-del-grupo-de-seguridad","title":"Creaci\u00f3n del grupo de seguridad.","text":"<ul> <li> <p>La sint\u00e1xis que vamos a seguir para crear el grupo de seguridad es la siguiente:</p> <p>```</p> </li> <li> <p><code>from_port = Que nos indica el puerto de salida</code></p> </li> <li><code>to_port = Que nos indica el puerto de entrada</code></li> <li><code>protocol = Puede ser o TCP o UDP</code></li> <li> <p><code>cird_blocks = Hace referencia al bloque de redes que queremos que se conecte.</code></p> </li> <li> <p>En este caso podemos observar el script para el frontend. Tambi\u00e9n podemos observar la diferencia entre <code>ingress</code> o <code>egress</code>. Esto hace referencia a las reglas de entrada que queremos generar, como a las reglas de salida.</p> </li> </ul>"},{"location":"second/#creamos-un-grupo-de-seguridad-frontedn1","title":"Creamos un grupo de seguridad frontedn1","text":"<p>resource \"aws_security_group\" \"FrontEnd\" { name        = \"FrontEnd\" description = \"Grupo de seguridad para la instancia de Frontend\"</p>"},{"location":"second/#reglas-de-entrada-para-permitir-el-trafico-ssh-http-y-https","title":"Reglas de entrada para permitir el tr\u00e1fico SSH, HTTP y HTTPS","text":"<p>ingress {     from_port   = 22     to_port     = 22     protocol    = \"tcp\"     cidr_blocks = [\"0.0.0.0/0\"] }</p> <p>ingress {     from_port   = 80     to_port     = 80     protocol    = \"tcp\"     cidr_blocks = [\"0.0.0.0/0\"] }</p> <pre><code># Reglas de salida para permitir todas las conexiones salientes\n</code></pre> <p>egress {     from_port   = 0     to_port     = 0     protocol    = \"-1\"     cidr_blocks = [\"0.0.0.0/0\"] } }</p> <p>``` - Los apartados principales son:</p>"},{"location":"second/#creacion-de-la-instancia","title":"Creaci\u00f3n de la instancia.","text":"<ul> <li> <p>Para crear la instancia tendremos que seguir el ejemplo siguiente:</p> <p>```     # Creamos una instancia EC2 solamente para el FrontEnd resource \"aws_instance\" \"FrontEnd\" { ami             = \"ami-0c7217cdde317cfec\" instance_type   = \"t2.medium\" key_name        = \"vockey\" security_groups = [aws_security_group.FrontEnd.name]</p> <p>tags = {     Name = \"FrontEnd\" } } ```</p> </li> <li> <p>\u00bfCuales son los apartados m\u00e1s importantes?</p> </li> <li> <p><code>ami = Es el c\u00f3digo de identificaci\u00f3n del SO que queremos utilizar</code></p> </li> <li><code>Instancie_key = Es el vockey, o claves de seguridad por las que accedemos por ssh a nuestras m\u00e1quinas</code></li> <li><code>Instance_type = Es el nivel de flavours que queremos ponerle, es decir, el hardware virtual de la m\u00e1quina.</code></li> <li><code>Security_Group = Hace referencia a la variable que anteriormente hemos creado con el nombre del grupo de seguridad.</code></li> </ul>"},{"location":"second/#creacion-y-asociacion-de-la-ips","title":"Creaci\u00f3n y asociaci\u00f3n de la IPS.","text":"<ul> <li> <p>Para crear las ips tendremos que seguir la siguiente estructura:</p> <p>```     # Creamos una IP el\u00e1stica y la asociamos a la instancia al frontend1 resource \"aws_eip\" \"ip_elastica1\" { instance = aws_instance.FrontEnd.id }</p> </li> <li> <p>El primer bloque del script nos permite crear una ip el\u00e1stica a trav\u00e9s de <code>aws</code> gracias al uso de <code>aws_eip</code> como resource. Al declararle un nombre de instanc\u00eda en este caso <code>FrontEnd</code> autom\u00e1ticamente har\u00e1 la acci\u00f3nd de asociarse con la instancia que anteriormente creemos y se llame as\u00ed.</p> <p>El segundo bloque nos permite que una vez hayamos lanzado el <code>terraform apply</code> y haga todo correctamente, podremos ver que ips se han asociado con que m\u00e1quina.</p> </li> </ul>"},{"location":"second/#mostramos-la-ip-publica-de-la-instancia-del-frontend1","title":"Mostramos la IP p\u00fablica de la instancia del frontend1","text":"<p>output \"elastic_ip1\" { value = aws_eip.ip_elastica1.public_ip } ```</p>"},{"location":"second/#gitignore","title":".GitIgnore.","text":"<ul> <li> <p>Es un archivo que vamos a poner, pero que realmente, no deber\u00edas salir. La funcionalidad principal de este archivo es que no se suban archivos que no queremos que el resto de la gente vea, o archivos de tama\u00f1o mayor de <code>100MBs</code> que github no soporta. </p> <p>En este caso la estructura que hemos puesto es la siguiente:</p> <p>```     # Local .terraform directories */.terraform/</p> <p>.terraform.lock.hcl</p> </li> <li> <p>Donde podemos observar las funciones que realiza cada linea del archivo. Como puede ser por ejemplo ignorar archivos/lineas de configuraci\u00f3n. O ocultar directorios completos que no queremos que se muestren en nuestro repo de git.</p> </li> </ul>"},{"location":"second/#tfstate-files","title":".tfstate files","text":"<p>.tfstate .tfstate.*</p>"},{"location":"second/#crash-log-files","title":"Crash log files","text":"<p>crash.log crash.*.log</p>"},{"location":"second/#exclude-all-tfvars-files-which-are-likely-to-contain-sensitive-data-such-as","title":"Exclude all .tfvars files, which are likely to contain sensitive data, such as","text":""},{"location":"second/#password-private-keys-and-other-secrets-these-should-not-be-part-of-version","title":"password, private keys, and other secrets. These should not be part of version","text":""},{"location":"second/#control-as-they-are-data-points-which-are-potentially-sensitive-and-subject","title":"control as they are data points which are potentially sensitive and subject","text":""},{"location":"second/#to-change-depending-on-the-environment","title":"to change depending on the environment.","text":"<p>.tfvars .tfvars.json</p>"},{"location":"second/#ignore-override-files-as-they-are-usually-used-to-override-resources-locally-and-so","title":"Ignore override files as they are usually used to override resources locally and so","text":""},{"location":"second/#are-not-checked-in","title":"are not checked in","text":"<p>override.tf override.tf.json _override.tf _override.tf.json</p>"},{"location":"second/#include-override-files-you-do-wish-to-add-to-version-control-using-negated-pattern","title":"Include override files you do wish to add to version control using negated pattern","text":""},{"location":"second/#example_overridetf","title":"!example_override.tf","text":""},{"location":"second/#include-tfplan-files-to-ignore-the-plan-output-of-command-terraform-plan-outtfplan","title":"Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan","text":""},{"location":"second/#example-tfplan","title":"example: tfplan","text":""},{"location":"second/#ignore-cli-configuration-files","title":"Ignore CLI configuration files","text":"<p>.terraformrc terraform.rc</p> <p>```</p>"}]}